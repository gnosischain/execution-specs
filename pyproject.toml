[build-system]
requires = ["setuptools>=77.0.3", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ethereum-execution"
description = "Ethereum execution layer specification, provided as a Python package for tooling and testing"
readme = "README.md"
requires-python = ">=3.11"
dynamic = ["version"]
license = "CC0-1.0"
urls = { "Homepage" = "https://github.com/ethereum/execution-specs" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: Implementation :: CPython",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
dependencies = [
    "pycryptodome>=3.22,<4",
    "coincurve>=20,<21",
    "typing_extensions>=4.4",
    "py-ecc>=8.0.0b2,<9",
    "ethereum-types>=0.2.4,<0.3",
    "ethereum-rlp>=0.1.4,<0.2",
    "cryptography>=45.0.1,<46",
]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools]
packages = [
    "ethereum_spec_tools",
    "ethereum_spec_tools.evm_tools",
    "ethereum_spec_tools.evm_tools.t8n",
    "ethereum_spec_tools.evm_tools.t8n.evm_trace",
    "ethereum_spec_tools.evm_tools.b11r",
    "ethereum_spec_tools.evm_tools.statetest",
    "ethereum_spec_tools.evm_tools.loaders",
    "ethereum_spec_tools.lint",
    "ethereum_spec_tools.lint.lints",
    "ethereum_spec_tools.new_fork",
    "ethereum_spec_tools.new_fork.codemod",
    "ethereum",
    "ethereum.forks.frontier",
    "ethereum.forks.frontier.utils",
    "ethereum.forks.frontier.vm",
    "ethereum.forks.frontier.vm.instructions",
    "ethereum.forks.frontier.vm.precompiled_contracts",
    "ethereum.utils",
    "ethereum.crypto",
    "ethereum_optimized",
    "ethereum.forks.homestead",
    "ethereum.forks.homestead.utils",
    "ethereum.forks.homestead.vm",
    "ethereum.forks.homestead.vm.instructions",
    "ethereum.forks.homestead.vm.precompiled_contracts",
    "ethereum.forks.dao_fork",
    "ethereum.forks.dao_fork.utils",
    "ethereum.forks.dao_fork.vm",
    "ethereum.forks.dao_fork.vm.instructions",
    "ethereum.forks.dao_fork.vm.precompiled_contracts",
    "ethereum.forks.tangerine_whistle",
    "ethereum.forks.tangerine_whistle.utils",
    "ethereum.forks.tangerine_whistle.vm",
    "ethereum.forks.tangerine_whistle.vm.instructions",
    "ethereum.forks.tangerine_whistle.vm.precompiled_contracts",
    "ethereum.forks.spurious_dragon",
    "ethereum.forks.spurious_dragon.utils",
    "ethereum.forks.spurious_dragon.vm",
    "ethereum.forks.spurious_dragon.vm.instructions",
    "ethereum.forks.spurious_dragon.vm.precompiled_contracts",
    "ethereum.forks.byzantium",
    "ethereum.forks.byzantium.utils",
    "ethereum.forks.byzantium.vm",
    "ethereum.forks.byzantium.vm.instructions",
    "ethereum.forks.byzantium.vm.precompiled_contracts",
    "ethereum.forks.constantinople",
    "ethereum.forks.constantinople.utils",
    "ethereum.forks.constantinople.vm",
    "ethereum.forks.constantinople.vm.instructions",
    "ethereum.forks.constantinople.vm.precompiled_contracts",
    "ethereum.forks.istanbul",
    "ethereum.forks.istanbul.utils",
    "ethereum.forks.istanbul.vm",
    "ethereum.forks.istanbul.vm.instructions",
    "ethereum.forks.istanbul.vm.precompiled_contracts",
    "ethereum.forks.muir_glacier",
    "ethereum.forks.muir_glacier.utils",
    "ethereum.forks.muir_glacier.vm",
    "ethereum.forks.muir_glacier.vm.instructions",
    "ethereum.forks.muir_glacier.vm.precompiled_contracts",
    "ethereum.forks.berlin",
    "ethereum.forks.berlin.utils",
    "ethereum.forks.berlin.vm",
    "ethereum.forks.berlin.vm.instructions",
    "ethereum.forks.berlin.vm.precompiled_contracts",
    "ethereum.forks.london",
    "ethereum.forks.london.utils",
    "ethereum.forks.london.vm",
    "ethereum.forks.london.vm.instructions",
    "ethereum.forks.london.vm.precompiled_contracts",
    "ethereum.forks.arrow_glacier",
    "ethereum.forks.arrow_glacier.utils",
    "ethereum.forks.arrow_glacier.vm",
    "ethereum.forks.arrow_glacier.vm.instructions",
    "ethereum.forks.arrow_glacier.vm.precompiled_contracts",
    "ethereum.forks.gray_glacier",
    "ethereum.forks.gray_glacier.utils",
    "ethereum.forks.gray_glacier.vm",
    "ethereum.forks.gray_glacier.vm.instructions",
    "ethereum.forks.gray_glacier.vm.precompiled_contracts",
    "ethereum.forks.paris",
    "ethereum.forks.paris.utils",
    "ethereum.forks.paris.vm",
    "ethereum.forks.paris.vm.instructions",
    "ethereum.forks.paris.vm.precompiled_contracts",
    "ethereum.forks.shanghai",
    "ethereum.forks.shanghai.utils",
    "ethereum.forks.shanghai.vm",
    "ethereum.forks.shanghai.vm.instructions",
    "ethereum.forks.shanghai.vm.precompiled_contracts",
    "ethereum.forks.cancun",
    "ethereum.forks.cancun.utils",
    "ethereum.forks.cancun.vm",
    "ethereum.forks.cancun.vm.instructions",
    "ethereum.forks.cancun.vm.precompiled_contracts",
    "ethereum.forks.prague",
    "ethereum.forks.prague.utils",
    "ethereum.forks.prague.vm",
    "ethereum.forks.prague.vm.instructions",
    "ethereum.forks.prague.vm.precompiled_contracts",
    "ethereum.forks.prague.vm.precompiled_contracts.bls12_381",
    "ethereum.forks.osaka",
    "ethereum.forks.osaka.utils",
    "ethereum.forks.osaka.vm",
    "ethereum.forks.osaka.vm.instructions",
    "ethereum.forks.osaka.vm.precompiled_contracts",
    "ethereum.forks.osaka.vm.precompiled_contracts.bls12_381",
]

[tool.setuptools.package-data]
"ethereum" = [
    "py.typed",
    "assets/mainnet.json",
    "assets/mainnet_genesis_alloc_rlp.hex",
    "assets/cache_sizes_2048_epochs.json",
    "assets/dataset_sizes_2048_epochs.json",
    "assets/blocks/block_1.json",
    "assets/blocks/block_1234567.json",
    "assets/blocks/block_12964999.json",
]
"ethereum_spec_tools" = ["py.typed"]

[project.optional-dependencies]
test = [
    "pytest>=8,<9",
    "pytest-cov>=4.1.0,<5",
    "pytest-xdist>=3.3.1,<4",
    "GitPython>=3.1.0,<3.2",
    "filelock>=3.15.1,<4",
    "requests",
    "requests-cache>=1.2.1,<2",
    "libcst>=1.8,<2",
    "ethereum-execution-tests",
]
lint = [
    "codespell==2.4.1",
    "mypy==1.17.0",
    "ruff==0.13.2",
    "vulture==2.14.0",
    "types-requests>=2.31,<2.33",
]
tools = [
    "platformdirs>=4.2,<5",
    "libcst>=1.8,<2",
]
doc = [
    "docc>=0.3.0,<0.4.0",
    "fladrif>=0.2.0,<0.3.0",
    "mistletoe>=1.5.0,<2",
]
optimized = [
    "rust-pyspec-glue>=0.0.9,<0.1.0",
    "ethash>=1.1.0,<2",
]

[tool.setuptools.dynamic]
version = { attr = "ethereum.__version__" }

[project.scripts]
ethereum-spec-lint = "ethereum_spec_tools.lint:main"
ethereum-spec-sync = "ethereum_spec_tools.sync:main"
ethereum-spec-new-fork = "ethereum_spec_tools.new_fork.cli:main"
ethereum-spec-patch = "ethereum_spec_tools.patch_tool:main"
ethereum-spec-evm = "ethereum_spec_tools.evm_tools:main"

[project.entry-points."docc.plugins"]
"ethereum_spec_tools.docc.discover" = "ethereum_spec_tools.docc:EthereumDiscover"
"ethereum_spec_tools.docc.build" = "ethereum_spec_tools.docc:EthereumBuilder"
"ethereum_spec_tools.docc.fix-indexes" = "ethereum_spec_tools.docc:FixIndexTransform"
"ethereum_spec_tools.docc.minimize-diffs" = "ethereum_spec_tools.docc:MinimizeDiffsTransform"

[project.entry-points."docc.plugins.html"]
"ethereum_spec_tools.docc:DiffNode" = "ethereum_spec_tools.docc:render_diff"
"ethereum_spec_tools.docc:BeforeNode" = "ethereum_spec_tools.docc:render_before_after"
"ethereum_spec_tools.docc:AfterNode" = "ethereum_spec_tools.docc:render_before_after"

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "bigmem: marks tests as big memory (deselect with '-m \"not bigmem\"')",
    "evm_tools: marks tests as evm_tools (deselect with '-m \"not evm_tools\"')",
    "json_blockchain_tests: marks tests as json_blockchain_tests (deselect with '-m \"not json_blockchain_tests\"')",
    "json_state_tests: marks tests as json_state_tests (deselect with '-m \"not json_state_tests\"')",
    "vm_test: marks tests as vm_test (deselect with '-m \"not vm_test\"')",
]

[tool.coverage.run]
omit = [
    "*/ethereum/*_glacier/*",
    "*/ethereum/dao_fork/*",
]

[tool.docc]
context = [
    "docc.references.context",
    "docc.search.context",
    "docc.html.context",
]
discovery = [
    "docc.search.discover",
    "docc.html.discover",
    "docc.python.discover",
    "ethereum_spec_tools.docc.discover",
    "docc.listing.discover",
    "docc.files.discover",
]
build = [
    "docc.search.build",
    "ethereum_spec_tools.docc.build",
    "docc.files.build",
    "docc.listing.build",
    "docc.resources.build",
]
transform = [
    "docc.python.transform",
    "docc.verbatim.transform",
    "docc.mistletoe.transform",
    "docc.mistletoe.reference",
    "ethereum_spec_tools.docc.fix-indexes",
    "ethereum_spec_tools.docc.minimize-diffs",
    "docc.references.index",
    "docc.search.transform",
    "docc.html.transform",
]

[tool.docc.plugins."docc.python.transform"]
excluded_references = [
    "ethereum_spec_tools.lint.lints",   # This is a namespace package.
]

[tool.docc.plugins."docc.python.discover"]
paths = [
    "src",
]
excluded_paths = [
    "src/ethereum_optimized",
    "src/ethereum_spec_tools",
]

[tool.docc.plugins."docc.html.context"]
extra_css = [
    "static/custom.css",
]

[tool.docc.plugins."docc.files.discover"]
files = [
    "static/custom.css",
]

[tool.docc.output]
path = "docs"
extension = ".html"

[tool.vulture]
exclude = ["tests/fixtures/", "eest_tests/"]
ignore_names = ["pytest_*"]

[tool.ruff]
line-length = 79

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "F", # Pyflakes
    "B", # flake8-bugbear
    "W", # pycodestyle warnings
    "I", # isort
    "A", # flake8-builtins
    "N", # pep8-naming
    "D", # pydocstyle
    "C4", # flake8-comprehensions
    "ARG", # flake8-unused-arguments
]
fixable = [
    "E", # pycodestyle errors
    "F", # Pyflakes
    "B", # flake8-bugbear
    "W", # pycodestyle warnings
    "I", # isort
    "D", # pydocstyle
]
ignore = [
# Common to STEEL
    "C401",     # Unnecessary generator set
    "C408",     # Unnecessary collection call
    "D107",     # Missing docstring in __init__
    "D200",     # One-line docstring should fit on one line with quotes
    "D203",     # 1 blank line required before class docstring
    "D205",     # Missing blank line after summary
    "D212",     # Multi-line docstring summary should start at the first line
    "D401",     # First line should be in imperative mood ("Do", not "Does")
]

[tool.ruff.lint.per-file-ignores]
"src/ethereum_spec_tools/evm_tools/loaders/fork_loader.py" = [
    "N802"          # Property names do not need to be lowercase
]
"src/ethereum_spec_tools/lint/*" = [
    "N802"          # Special linting code absolved of function naming reqs
]
"src/ethereum/crypto/*" = [
    "N806",         # Special crypto code absolved of variable naming reqs
    "N802"          # Special crypto code absolved of function naming reqs
]
"src/ethereum_spec_tools/evm_tools/t8n/evm_trace/eip3155.py" = [
    "N815"          # The traces must use camel case in JSON property names
]
"src/ethereum_spec_tools/evm_tools/t8n/evm_trace.py" = [
    "N815"          # The traces must use camel case in JSON property names
]
"tests/*" = ["ARG001"]

[tool.codespell]
builtin = "clear,code,usage"    # Built-in dictionaries to use
skip = [                        # Don't check these files/folders
    ".git/*",
    ".tox/*",
    ".venv/*",
    "build/*",
    "dist/*",
    "*.pyc",
    "ethereum_execution.egg-info/*",
    "*.coverage*",
    "__pycache__",
    ".ruff_cache",
    "fixtures.*",
    "tests/fixtures",
    "tests/json_infra/fixtures",
    "eest_tests",
    "src/ethereum_spec_tools/evm_tools/t8n" # Temporary while being re-written
]
count = true                    # Display counts of errors
check-hidden = false            # Don't check hidden files (starting with .)

[tool.mypy]
namespace_packages = true
strict_optional = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
strict_bytes = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
ignore_missing_imports = false
mypy_path = ["src", "packages/tests/src"]
files = ["src", "tests", "packages"]
exclude = [
    "^\\.cache/",
    "^\\.git/",
    "^\\.pytest_cache/",
    "^\\.ruff_cache/",
    "^\\.tox/",
    "^\\.venv/",
    "^\\.vscode/",
    "^fixtures/",
    "^logs/",
    "^site/",
]
plugins = ["pydantic.mypy"]

[tool.uv]
required-version = ">=0.7.0"

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
ethereum-execution-tests = { workspace = true }
